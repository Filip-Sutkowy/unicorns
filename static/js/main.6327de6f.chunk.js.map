{"version":3,"sources":["App.module.css","images/1.gif","images/2.gif","images/3.gif","images/6.gif","images/7.gif","images/8.gif","images/9.gif","images/10.gif","images/11.gif","images/12.gif","images/13.gif","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","img1","img2","img3","img6","img7","img8","img9","img10","img11","img12","img13","App","props","spawn","style","top","Math","random","state","height","left","width","transform","floor","image","key","length","className","classes","src","imageList","setState","unicorns","updateWindowDimensions","bind","console","log","this","window","addEventListener","removeEventListener","innerWidth","innerHeight","Home","counter","interface","PlayLink","onClick","href","target","rel","gitlink","icon","faGithub","gitlogo","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,UAAY,uBAAuB,SAAW,sBAAsB,QAAU,qBAAqB,QAAU,qBAAqB,QAAU,qBAAqB,MAAQ,qB,wBCDpND,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,wZCY9BC,EAAS,CACrBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KC0DcC,EAzEf,kDAuBE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAtBRb,OAAS,GAqBU,EAnBnBc,MAAQ,WAEN,IAAMC,EAAQ,CACZC,IAAKC,KAAKC,SAAW,EAAKC,MAAMC,OAAS,IACzCC,KAAMJ,KAAKC,SAAW,EAAKC,MAAMG,MAAQ,IACzCC,UAAW,UAAUN,KAAKO,MAAM,GAAGP,KAAKC,WAAaD,KAAKC,SAAW,IAAO,EAAI,GAAG,QAGjFO,EAAQ,yBACVC,IAAK,EAAK1B,OAAO2B,OACjBC,UAAWC,IAAQJ,MACnBV,MAAOA,EACPe,IAAKC,EAAUd,KAAKO,MAAMP,KAAKC,SAAWa,EAAUJ,WAEtD,EAAK3B,OAAL,sBAAkB,EAAKA,QAAvB,CAA+ByB,IAE/B,EAAKO,SAAS,CAAEC,SAAU,EAAKd,MAAMc,SAAW,KAKhD,EAAKd,MAAQ,CAAEG,MAAO,EAAGF,OAAQ,EAAGa,SAAU,GAC9C,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9BC,QAAQC,IAAI,EAAKlB,OAJA,EAvBrB,gEA+BImB,KAAKJ,yBACLK,OAAOC,iBAAiB,SAAUF,KAAKJ,0BAhC3C,6CAoCIK,OAAOE,oBAAoB,SAAUH,KAAKJ,0BApC9C,+CAwCII,KAAKN,SAAS,CAAEV,MAAOiB,OAAOG,WAAYtB,OAAQmB,OAAOI,gBAxC7D,+BA6CI,OACE,yBAAKf,UAAWC,IAAQe,MAEtB,6BAAON,KAAKtC,QACZ,0BAAM4B,UAAWC,IAAQgB,QAAQ,IAAIhB,IAAQiB,WAAYR,KAAKnB,MAAMc,UAEpE,uBAAGL,UAAWC,IAAQiB,WAAtB,sCAIA,uBACElB,UAAWC,IAAQkB,SAAS,IAAIlB,IAAQiB,UACxCE,QAASV,KAAKxB,OAFhB,UAKA,uBAAGmC,KAAK,4CACLC,OAAO,SACPC,IAAI,sBACJvB,UAAWC,IAAQuB,QAAQ,IAAIvB,IAAQiB,WAExC,kBAAC,IAAD,CAAiBO,KAAMC,IAAU1B,UAAWC,IAAQ0B,UALtD,gBA5DR,GAAyBC,IAAMC,WCIXC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.6327de6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"App_Home__2AJ19\",\"interface\":\"App_interface__3G5Sd\",\"PlayLink\":\"App_PlayLink__X6j3n\",\"gitlink\":\"App_gitlink__1A6g7\",\"gitlogo\":\"App_gitlogo__1-g19\",\"counter\":\"App_counter__o2xHs\",\"image\":\"App_image__3byI1\"};","module.exports = __webpack_public_path__ + \"static/media/1.e4deac98.gif\";","module.exports = __webpack_public_path__ + \"static/media/2.092badd6.gif\";","module.exports = __webpack_public_path__ + \"static/media/3.10a9ce93.gif\";","module.exports = __webpack_public_path__ + \"static/media/6.b30d24b9.gif\";","module.exports = __webpack_public_path__ + \"static/media/7.2eddcc87.gif\";","module.exports = __webpack_public_path__ + \"static/media/8.f4d2f16d.gif\";","module.exports = __webpack_public_path__ + \"static/media/9.69d7e2eb.gif\";","module.exports = __webpack_public_path__ + \"static/media/10.7dfd4e54.gif\";","module.exports = __webpack_public_path__ + \"static/media/11.de1a09b9.gif\";","module.exports = __webpack_public_path__ + \"static/media/12.05b8132a.gif\";","module.exports = __webpack_public_path__ + \"static/media/13.482588c9.gif\";","import img1 from './images/1.gif';\r\nimport img2 from './images/2.gif';\r\nimport img3 from './images/3.gif';\r\nimport img6 from './images/6.gif';\r\nimport img7 from './images/7.gif';\r\nimport img8 from './images/8.gif';\r\nimport img9 from './images/9.gif';\r\nimport img10 from './images/10.gif';\r\nimport img11 from './images/11.gif';\r\nimport img12 from './images/12.gif';\r\nimport img13 from './images/13.gif';\r\n\r\nexport const images = [\r\n\timg1,\r\n\timg2,\r\n\timg3,\r\n\timg6,\r\n\timg7,\r\n\timg8,\r\n\timg9,\r\n\timg10,\r\n\timg11,\r\n\timg12,\r\n\timg13,\r\n];\r\n\r\n\r\nexport default {\r\n\t\timages\r\n};\r\n\r\n","import React from 'react';\nimport classes from './App.module.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nimport { images as imageList } from './images';\n\nexport class App extends React.Component {\n\n  images = [];\n\n  spawn = () => {\n\n    const style = {\n      top: Math.random() * this.state.height - 250,\n      left: Math.random() * this.state.width - 250,\n      transform: 'rotate('+Math.floor(60*Math.random()) * (Math.random() < 0.5 ? -1 : 1)+'deg)'\n    }\n\n    let image = <img\n      key={this.images.length}\n      className={classes.image}\n      style={style}\n      src={imageList[Math.floor(Math.random() * imageList.length)]}/>;\n\n    this.images =[ ...this.images, image];\n\n    this.setState({ unicorns: this.state.unicorns + 1 });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0, unicorns: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  render() {\n\n    return (\n      <div className={classes.Home}>\n\n        <div>{ this.images }</div>\n        <span className={classes.counter+' '+classes.interface}>{this.state.unicorns}</span>\n\n        <p className={classes.interface}>\n          Click button to add more unicorns!\n        </p>\n\n        <a\n          className={classes.PlayLink+' '+classes.interface}\n          onClick={this.spawn}\n        >Spawn!</a>\n\n        <a href=\"https://github.com/Filip-Sutkowy/unicorns\"\n           target=\"_blank\"\n           rel=\"noopener noreferrer\"\n           className={classes.gitlink+' '+classes.interface}\n        >\n          <FontAwesomeIcon icon={faGithub} className={classes.gitlogo} /> Github\n        </a>\n      </div>\n\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}